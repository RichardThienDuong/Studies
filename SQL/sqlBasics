SQL - Structured Query Language is the language we use to issure commands to the database
(create a table, retrieve some data, insert data, delete data)

Typical as a developer you would take input files and write Python programs that will use SQL language
to access the Database files as well as use SQLite Browser to access Database files , the through 
Python programs possibly make output files that handle R, Excel, or D3.js visualizations

Web Applications w/ Databases 
    Application Developer - Builds the logic for the application, the look and feel of the application
    - monitors the application for problems 
    Database Administrator - Monitors and adjusts the database as the program runs in production
    Often both people participate in the building of the "Data model"

A Database Administrator (DBA) is a person responsible for the design, implementation, maintenance, 
and repair of an organization's database. The role includes the development and design of database
strategies, monitoring and improving database performance and capacity, and planning for future 
expansion requirements. They may also plan, coordinate, and implement security measures to safeguard
the database. 
    
A Database Model or Database Schema is the structure or format of a database, described in a formal
language supported by the database management system. In other words, a "database model" is the
application of a data model when used in conjunction with a database management system.

Three major Database Management Systems in wide use
    Oracle - Large, commercial, enterprise-scale, very very tweakable
    MySql - Simpler but very fast and scalable - commercial open
    SqlServer - Very nice - from Microsoft ( also Access )
Many other smaller projects, free and open source 
    HSQL, SQLite, Postgres, ... 

https://www.py4e.com/lectures3/Pythonlearn-15-Database-Handout.txt

Download and Install: http://sqlitebrowser.org/

Single Table SQL

CREATE TABLE "Users" ("name" TEXT, "email" TEXT)

INSERT INTO Users (name, email) VALUES ('Chuck', 'csev@umich.edu')
INSERT INTO Users (name, email) VALUES ('Colleen', 'cvl@umich.edu')
INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
INSERT INTO Users (name, email) VALUES ('Sally', 'a1@umich.edu')
INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
INSERT INTO Users (name, email) VALUES ('Kristen', 'kf@umich.edu')

DELETE FROM Users WHERE email='ted@umich.edu'

UPDATE Users SET name="Charles" WHERE email='csev@umich.edu'

SELECT * FROM Users

SELECT * FROM Users WHERE email='csev@umich.edu'

SELECT * FROM Users ORDER BY email

SELECT * FROM Users ORDER BY name DESC

Database design is an art form of its own with particular skills and experience
Our goal is to avoid the really bad mistakes and design clean and easily understood databases
Others may performance tune things later 
Database design starts with a picture...

Drawing a picture of the data objects for our application and then figuring out how to represent the objects and their relationships
Basic Rule: Don't put the same string data in twice - use a relationship instead 
When there is one thing in the "real world" there shoudl be one copy of that thing in the database

Three Kinds of Keys 
Primary key - generally an integer auto-increment field
Logical key - What the outside world uses for lookup
Foreign key - generally an integer key pointing to a row in another table

Never use your logical key as the primary key 
Logical keys can and do change, albeit slowly
Relationships that are based on matching string fields are less efficient than integers
A foreign key is when a table has a column that contains a key which points to the primary key of another table.
When all primary keys are integers, then all foreign keys are integers - this is good - very good 

The JOIN Operation links across several tables as part of a select operation
You must tell the JOIN how to use the keys that make the connection between the tables using an ON clause

Many to Many - sometimes we need to model a relationship that is many-to-many, We need to pass a "connection" table with two foreign keys, There is usually no separate primary key 

Complexity makes speed possible and allows you to get very fast results as the data size grows
By normalizing the data and linking it with integer keys , the overall amount of data which the relational databasee must scan is far lower than if the data were simply flattened out
It might seem like a tradeoff - spend some time designing your database so it continues to be fast when your application is a success

Indexes improve access performance for things like string fields
Constraints on data - (connot be NULL, etc..)
Transactions - allow SQL operations to be grouped and done as a unit